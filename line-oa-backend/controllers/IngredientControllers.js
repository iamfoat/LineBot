const db = require("../db"); // ‡∏î‡∏∂‡∏á Database Connection
const { GoogleGenerativeAI } = require("@google/generative-ai");
const fs = require("fs");
const multer = require("multer");
const path = require("path");
const cloudinary = require("cloudinary").v2;
const moment = require("moment");

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
});

const CreateIngredient = async (req, res) => {
  try {
    const {
      Ingredient_name,
      Quantity,
      Low_stock_threshold,
      Purchase_Price,
      Expiry_date,
    } = req.body;

    if (
      !Ingredient_name ||
      Quantity == null ||
      Purchase_Price == null ||
      Expiry_date == null
    ) {
      return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
    }

    await db.query("START TRANSACTION");

    let Ingredient_id;
    let newQuantity = parseInt(Quantity, 10);

    if (isNaN(newQuantity)) {
      return res.status(400).json({ error: "Quantity ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç" });
    }
    newQuantity = newQuantity * 1000;

    console.log(newQuantity);

    // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Ingredient_id
    const [existingIngredient] = await db.query(
      "SELECT Ingredient_id FROM Ingredient WHERE Ingredient_name = ?",
      [Ingredient_name]
    );

    if (existingIngredient.length > 0) {
      Ingredient_id = existingIngredient[0].Ingredient_id;

      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏•‡∏á `Ingredient_item`
      await db.query(
        "INSERT INTO Ingredient_item (Ingredient_id, Batch_code, Quantity, Purchase_Price, Expiry_date, Create_at) VALUES (?, ?, ?, ?, ?, NOW())",
        [Ingredient_id, Date.now(), newQuantity, Purchase_Price, Expiry_date]
      );

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `Quantity` ‡πÉ‡∏ô Ingredient
      await db.query(
        "UPDATE Ingredient SET Quantity = (SELECT COALESCE(SUM(Quantity), 0) FROM Ingredient_item WHERE Ingredient_id = ?), Updated_at = NOW() WHERE Ingredient_id = ?",
        [Ingredient_id, Ingredient_id]
      );
    } else {
      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° `Ingredient` ‡πÉ‡∏´‡∏°‡πà
      const [result] = await db.query(
        "INSERT INTO Ingredient (Ingredient_name, Quantity, Low_stock_threshold, Updated_at) VALUES (?, ?, ?, NOW())",
        [Ingredient_name, newQuantity, Low_stock_threshold]
      );
      Ingredient_id = result.insertId;

      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° `Ingredient_item`
      await db.query(
        "INSERT INTO Ingredient_item (Ingredient_id, Batch_code, Quantity, Purchase_Price, Expiry_date, Create_at) VALUES (?, ?, ?, ?, ?, NOW())",
        [Ingredient_id, Date.now(), newQuantity, Purchase_Price, Expiry_date]
      );
    }

    await db.query("COMMIT");

    res.status(201).json({
      message: "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      Ingredient_id,
      total_quantity: newQuantity,
    });
  } catch (error) {
    await db.query("ROLLBACK");
    console.error("‚ùå Error creating ingredient batch:", error);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÑ‡∏î‡πâ" });
  }
};

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, "uploads/ingredients");
  },
  filename: (req, file, cb) => {
    cb(null, `${Date.now()}-${file.originalname}`);
  },
});

const ingredientUploader = multer({ storage: multer.memoryStorage() });

const analyzeIngredientSlip = async (req, res) => {
  try {
    const file = req.file;
    if (!file) return res.status(400).json({ error: "No file uploaded" });

    // 1Ô∏è‚É£ Upload to Cloudinary
    const uploadResult = await new Promise((resolve, reject) => {
      const stream = cloudinary.uploader.upload_stream(
        { folder: "ingredient-receipts" },
        (err, result) => {
          if (err) reject(err);
          else resolve(result);
        }
      );
      stream.end(file.buffer);
    });

    const receiptImg = uploadResult.secure_url;

    // 2Ô∏è‚É£ Analyze with Gemini
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    const result = await model.generateContent([
      {
        text: `‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏ö OCR ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à Makro

‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏¢‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ:

{
  "items": [
    {
      "name": "‡∏ô‡πâ‡∏≥‡∏õ‡∏•‡∏≤‡∏ó‡∏¥‡∏û‡∏£‡∏™‡∏Ç‡∏ß‡∏î‡πÄ‡∏û‡∏ó300‡∏ã‡∏µ‡∏ã‡∏µ",
      "quantity": 6,
      "price": 97,
      "expiry_date": null
    }
  ]
}

‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:
- name = ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
- quantity = ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡πâ‡∏ô (‡πÅ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å packs/units)
- price = ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÉ‡∏´‡πâ‡∏´‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏°‡∏≤)
- expiry_date = null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à

‡∏≠‡∏¢‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÉ‡∏î ‡πÜ ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ items ‡πÄ‡∏õ‡πá‡∏ô []`,
      },
      {
        inlineData: {
          mimeType: file.mimetype,
          data: file.buffer.toString("base64"),
        },
      },
    ]);

    console.log("üîç Gemini raw text:", result.response.text());
    let ocrText = result.response.text().trim();

    // ‚úÖ Strip markdown ```json ... ```
    if (ocrText.startsWith("```")) {
      const match = ocrText.match(/```json\s*([\s\S]*?)```/);
      if (match && match[1]) {
        ocrText = match[1].trim();
      }
    }

    let json;
    try {
      json = JSON.parse(ocrText);
    } catch (e) {
      console.error("‚ùå JSON parse error:", e.message);
      return res.status(400).json({
        error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á JSON ‡πÑ‡∏î‡πâ",
        raw: ocrText,
      });
    }
    const generateBatchCode = () =>
      `Lot-${Date.now()}-${Math.floor(Math.random() * 1000)}`;

    // 3Ô∏è‚É£ Insert items to Ingredient_item
    for (const item of json.items) {
      const batchCode = generateBatchCode();
      const [ingredient] = await db.query(
        "SELECT Ingredient_id FROM Ingredient WHERE Ingredient_name = ?",
        [item.name]
      );

      if (ingredient.length === 0) continue;

      const expiryDate =
        item.expiry_date || moment().add(5, "days").format("YYYY-MM-DD");

      await db.query(
        `INSERT INTO Ingredient_item (Ingredient_id, Batch_code, quantity, purchase_price, expiry_date, receipt_img, , Create_at)
           VALUES (?, ?, ?, ?, ?, ?, ?)`,
        [
          ingredient[0].Ingredient_id,
          batchCode,
          item.quantity,
          item.price,
          expiryDate,
          receiptImg,
          new Date(),
        ]
      );

      await db.query(
        "UPDATE Ingredient SET Quantity = Quantity + ? WHERE Ingredient_id = ?",
        [item.quantity, ingredient[0].Ingredient_id]
      );
    }

    res.json({
      message: "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      items: json.items,
      receipt_img: receiptImg,
    });
  } catch (error) {
    console.error("‚ùå analyzeIngredientSlip error:", error.message);
    res.status(500).json({ error: "OCR ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" });
  }
};

const confirmOcrInsertToDB = async (req, res) => {
  const { items, receipt_img } = req.body;
  const generateBatchCode = () =>
    `Lot-${Date.now()}-${Math.floor(Math.random() * 1000)}`;

  try {
    for (const item of items) {
      const batchCode = generateBatchCode();
      let ingredientId;

      // üîç 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
      const [ingredient] = await db.query(
        "SELECT Ingredient_id FROM Ingredient WHERE Ingredient_name = ?",
        [item.name]
      );

      if (ingredient.length === 0) {
        // ‚ûï 2. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤ Ingredient
        const [insertResult] = await db.query(
          "INSERT INTO Ingredient (Ingredient_name, Quantity, Low_stock_threshold, Updated_at) VALUES (?, ?, ?, NOW())",
          [item.name, 0, 5] // ‚ùó ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Low_stock_threshold ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ
        );
        ingredientId = insertResult.insertId;
        console.log(
          `‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Ingredient ‡πÉ‡∏´‡∏°‡πà: ${item.name} (ID: ${ingredientId})`
        );
      } else {
        ingredientId = ingredient[0].Ingredient_id;
      }

      // üì¶ 3. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ Ingredient_item
      const expiryDate =
        item.expiry_date || moment().add(5, "days").format("YYYY-MM-DD");

      const quantityGrams = item.quantity * 1000;

      await db.query(
        `INSERT INTO Ingredient_item 
            (Ingredient_id, quantity, purchase_price, expiry_date, receipt_img, Batch_code)
            VALUES (?, ?, ?, ?, ?, ?)`,
        [
          ingredientId,
          quantityGrams,
          item.price,
          expiryDate,
          receipt_img,
          batchCode,
        ]
      );

      // üîÑ 4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï stock
      await db.query(
        "UPDATE Ingredient SET Quantity = Quantity + ?, Updated_at = NOW() WHERE Ingredient_id = ?",
        [quantityGrams, ingredientId]
      );
    }

    res.json({
      message: "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏£‡∏ß‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏´‡∏°‡πà)",
    });
  } catch (error) {
    console.error("‚ùå Error:", error);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å" });
  }
};

const getIngredient = async (req, res) => {
  try {
    const [ingredients] = await db.query(`
            SELECT 
                i.Ingredient_id, 
                i.Ingredient_name, 
                COALESCE(SUM(ii.Quantity), 0) AS Total_Quantity, -- ‚úÖ ‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                i.Low_stock_threshold,
                MAX(ii.Expiry_date) AS Latest_Expiry,
                MAX(ii.Create_at) AS Updated_at
            FROM Ingredient i
            LEFT JOIN Ingredient_item ii ON i.Ingredient_id = ii.Ingredient_id
            GROUP BY i.Ingredient_id, i.Ingredient_name, i.Low_stock_threshold;
        `);
    res.status(200).json(ingredients);
  } catch (error) {
    console.error("‚ùå Error fetching ingredients:", error);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÑ‡∏î‡πâ" });
  }
};

const AddStock = async (req, res) => {
  try {
    const { Ingredient_id, quantity } = req.body;

    if (!Ingredient_id || quantity == null) {
      return res
        .status(400)
        .json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ Ingredient_id ‡πÅ‡∏•‡∏∞ quantity" });
    }

    const quantityGrams = quantity * 1000;
    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const [result] = await db.query(
      "UPDATE `Ingredient` SET Quantity = Quantity + ?, Updated_at = NOW() WHERE Ingredient_id = ?",
      [quantityGrams, Ingredient_id]
    );

    res
      .status(200)
      .json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ", updated_quantity: quantity });
  } catch (error) {
    console.error("‚ùå Error updating stock:", error);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏î‡πâ" });
  }
};

const DeleteIngredient = async (req, res) => {
  try {
    const { Ingredient_id } = req.params;

    const [result] = await db.query(
      "DELETE FROM `ingredient` WHERE Ingredient_id = ?",
      [Ingredient_id]
    );

    res.status(200).json({ message: "‡∏•‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ" });
  } catch (error) {
    console.error("‚ùå Error deleting ingredient:", error);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÑ‡∏î‡πâ" });
  }
};

const AddMultipleIngredients = async (req, res) => {
  try {
    const { ingredients } = req.body;

    if (!ingredients || ingredients.length === 0) {
      return res
        .status(400)
        .json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£" });
    }

    await db.query("START TRANSACTION");

    for (const ing of ingredients) {
      let { name, quantity, price, threshold, expiry_date } = ing;

      if (!name || quantity == null || price == null) {
        return res
          .status(400)
          .json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Name, Quantity ‡πÅ‡∏•‡∏∞ Price ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
      }

      quantity = parseInt(quantity, 10);
      price = parseFloat(price);
      threshold = parseInt(threshold, 10) || 0;
      const quantityGrams = quantity * 1000;

      expiry_date =
        expiry_date ||
        new Date(new Date().setDate(new Date().getDate() + 5))
          .toISOString()
          .split("T")[0];

      let Ingredient_id;
      const [existingIngredient] = await db.query(
        "SELECT Ingredient_id FROM `Ingredient` WHERE Ingredient_name = ?",
        [name]
      );

      if (existingIngredient.length > 0) {
        Ingredient_id = existingIngredient[0].Ingredient_id;
        await db.query(
          "UPDATE `Ingredient` SET Low_stock_threshold = ? WHERE Ingredient_id = ?",
          [threshold, Ingredient_id]
        );
      } else {
        const [result] = await db.query(
          "INSERT INTO `Ingredient` (Ingredient_name, Quantity, Low_stock_threshold, Updated_at) VALUES (?, ?, ?, NOW())",
          [name, quantityGrams, threshold]
        );
        Ingredient_id = result.insertId;
      }

      const Batch_code = Date.now();
      await db.query(
        "INSERT INTO `Ingredient_item` (Ingredient_id, Batch_code, Quantity, Purchase_Price, Expiry_date, Create_at) VALUES (?, ?, ?, ?, ?, NOW())",
        [Ingredient_id, Batch_code, quantityGrams, price, expiry_date]
      );

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Quantity ‡πÉ‡∏ô Ingredient
      await db.query(
        "UPDATE Ingredient SET Quantity = (SELECT COALESCE(SUM(Quantity), 0) FROM Ingredient_item WHERE Ingredient_id = ?), Updated_at = NOW() WHERE Ingredient_id = ?",
        [Ingredient_id, Ingredient_id]
      );
    }

    await db.query("COMMIT");

    res.status(201).json({ message: "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (error) {
    await db.query("ROLLBACK");
    console.error("‚ùå Error adding ingredients:", error);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÑ‡∏î‡πâ" });
  }
};

module.exports = {
  CreateIngredient,
  getIngredient,
  AddStock,
  DeleteIngredient,
  AddMultipleIngredients,
  ingredientUploader,
  analyzeIngredientSlip,
  confirmOcrInsertToDB,
};
