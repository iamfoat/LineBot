const db = require("../db");
require("dotenv").config();

const getOrder = async (req, res) => {
  try {
    const [orders] = await db.query(`
            SELECT 
                o.Order_id, 
                COALESCE(c.Customer_name, '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠') AS Customer_name, 
                o.Total_amount, 
                o.Customer_Address, 
                o.created_at, 
                o.Status
            FROM \`Order\` o
            LEFT JOIN \`Customer\` c ON o.Customer_id = c.Customer_id
        `);
    // console.log("Fetched Orders:", orders);
    res.status(200).json(orders);
  } catch (err) {
    console.error("Error fetching orders:", err);
    res.status(500).json({ error: "Failed to fetch orders" });
  }
};

const createOrder = async (req, res) => {
  try {
    const { customerName, productId, quantityOrdered } = req.body;

    if (
      !customerName ||
      !productId ||
      quantityOrdered == null ||
      quantityOrdered <= 0
    ) {
      return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
    }

    await db.query("START TRANSACTION");

    const [orderResult] = await db.query(
      "INSERT INTO `Order` (Customer_name, Product_id, Quantity, Order_date) VALUES (?, ?, ?, NOW())",
      [customerName, productId, quantityOrdered]
    );

    const orderId = orderResult.insertId;

    console.log(`‚úÖ Order ID ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á: ${orderId}`);

    await deductIngredients([
      { product_id: productId, quantity: quantityOrdered },
    ]);

    await db.query("COMMIT");

    res.status(200).json({
      message: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡∏´‡∏±‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‚úÖ",
      orderId: orderId,
    });
  } catch (error) {
    await db.query("ROLLBACK");
    console.error("‚ùå Error creating order:", error);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ" });
  }
};

const checkStockBeforeDeduct = async (orders) => {
  try {
    for (const order of orders) {
      const [product] = await db.query(
        "SELECT Ingredient_id FROM Product WHERE Product_id = ?",
        [order.product_id]
      );

      let ingredientList = [];

      const raw = product[0].Ingredient_id;
      if (typeof raw === "string") {
        try {
          ingredientList = JSON.parse(raw);
        } catch (e) {
          console.error("‚ùå JSON parse error in Ingredient_id:", e);
          return `‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${order.product_id}`;
        }
      } else if (Array.isArray(raw)) {
        ingredientList = raw; // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô array ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
      } else {
        console.warn("‚ö†Ô∏è Ingredient_id ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà string ‡∏´‡∏£‡∏∑‡∏≠ array:", raw);
        return `‚ùå ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${order.product_id} ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`;
      }

      for (const ingredient of ingredientList) {
        const ingredientID = ingredient.Ingredient_id;
        const requiredQuantity = ingredient.Quantity_used * order.quantity;

        const [stock] = await db.query(
          "SELECT SUM(Quantity) AS total FROM Ingredient_item WHERE Ingredient_id = ?",
          [ingredientID]
        );

        const totalAvailable = stock[0].total || 0;

        if (totalAvailable < requiredQuantity) {
          return `‚ùå ‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÑ‡∏°‡πà‡∏û‡∏≠ ‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏±‡πà‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏∑‡πà‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞`;
        }
      }
    }
    return null; // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  } catch (error) {
    console.error("‚ùå Error checking stock:", error);
    return "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö";
  }
};

const deductIngredients = async (productId, quantityOrdered) => {
    try {
      // ‚úÖ ‡∏î‡∏∂‡∏á Ingredient_id ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÜ
      const [productRows] = await db.query(
        "SELECT Ingredient_id FROM Product WHERE Product_id = ?",
        [productId]
      );
  
      let ingredientList = [];
      const raw = productRows[0].Ingredient_id;
  
      if (typeof raw === "string") {
        ingredientList = JSON.parse(raw);
      } else if (Array.isArray(raw)) {
        ingredientList = raw;
      } else {
        console.warn("‚ö†Ô∏è Ingredient_id ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:", raw);
        return;
      }
  
      for (const ingredient of ingredientList) {
        const ingredientID = ingredient.Ingredient_id;
        let qtyToDeduct = ingredient.Quantity_used * quantityOrdered;
  
        // ‚úÖ ‡∏î‡∏∂‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏•‡πá‡∏≠‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (FIFO)
        const [batches] = await db.query(
          "SELECT * FROM Ingredient_item WHERE Ingredient_id = ? AND Quantity > 0 ORDER BY expiry_date ASC",
          [ingredientID]
        );
  
        for (const batch of batches) {
          if (qtyToDeduct <= 0) break;
  
          const deductQty = Math.min(batch.Quantity, qtyToDeduct);
          await db.query(
            "UPDATE Ingredient_item SET Quantity = Quantity - ? WHERE Batch_code = ?",
            [deductQty, batch.Batch_code]
          );
           
  
          qtyToDeduct -= deductQty;
          console.log(`üîπ ‡∏´‡∏±‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö: Ingredient ID ${ingredientID}, ‡πÉ‡∏ä‡πâ‡∏•‡πá‡∏≠‡∏ï ${batch.Batch_code}, ‡∏´‡∏±‡∏Å ${deductQty}`);
        }
  
        // ‚úÖ ‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏•‡πá‡∏≠‡∏ï‡πÅ‡∏•‡πâ‡∏ß ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏£‡∏ß‡∏°‡πÉ‡∏ô Ingredient table
        await db.query(
          `UPDATE Ingredient 
           SET Quantity = (
             SELECT COALESCE(SUM(Quantity), 0) 
             FROM Ingredient_item 
             WHERE Ingredient_id = ?
           ), 
           Updated_at = NOW() 
           WHERE Ingredient_id = ?`,
          [ingredientID, ingredientID]
        );
  
        if (qtyToDeduct > 0) {
          console.warn(`‚ö†Ô∏è ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö ID ${ingredientID} ‡πÑ‡∏°‡πà‡∏û‡∏≠ ‡∏´‡∏±‡∏Å‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö`);
        }
      }
    } catch (error) {
      console.error("‚ùå Error deducting ingredients:", error);
    }
  };
  
  const deductIngredientsBulk = async (orders) => {
    try {
      for (const order of orders) {
        await deductIngredients(order.product_id, order.quantity);
      }
    } catch (error) {
      console.error("‚ùå Error in bulk ingredient deduction:", error);
    }
  };

const getCompletedOrders = async (req, res) => {
  try {
    const [completedOrders] = await db.query(`
            SELECT 
                o.Order_id, 
                COALESCE(c.Customer_name, '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠') AS Customer_name, 
                o.Total_amount, 
                o.Customer_Address, 
                o.created_at, 
                o.Status
            FROM \`Order\` o
            LEFT JOIN \`Customer\` c ON o.Customer_id = c.Customer_id
            WHERE o.Status = 'Completed'  -- ‚úÖ ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Order ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
            ORDER BY o.created_at DESC
        `);

    res.status(200).json(completedOrders);
  } catch (err) {
    console.error("Error fetching completed orders:", err);
    res.status(500).json({ error: "Failed to fetch completed orders" });
  }
};

module.exports = {
  getOrder,
  createOrder,
  checkStockBeforeDeduct,
  deductIngredients,
  getCompletedOrders,
  deductIngredientsBulk,
};
