const axios = require("axios");
const db = require("../db");
const FormData = require("form-data");
const fs = require("fs");
const path = require("path");
require("dotenv").config();

const config = {
    channelAccessToken: process.env.CHANNEL_ACCESS_TOKEN,
    SLIPOK_BRANCH_ID: process.env.SLIPOK_BRANCH_ID,
    SLIPOK_API_KEY: process.env.SLIPOK_API_KEY,
};

// üì• ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å LINE API
const downloadImage = async (imageId) => {
    const url = `https://api-data.line.me/v2/bot/message/${imageId}/content`;
    const headers = { Authorization: `Bearer ${config.channelAccessToken}` };

    try {
        console.log("üì• Downloading image from:", url);
        const response = await axios.get(url, { headers, responseType: "arraybuffer" });

        const tmpDir = path.join(__dirname, "..", "tmp");
        if (!fs.existsSync(tmpDir)) {
            fs.mkdirSync(tmpDir, { recursive: true });
        }

        const imagePath = path.join(tmpDir, `slip-${imageId}.jpg`);
        fs.writeFileSync(imagePath, response.data);

        return imagePath;
    } catch (error) {
        console.error("‚ùå Error downloading image:", error.response ? error.response.data.toString() : error.message);
        return null;
    }
};

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
const verifySlip = async (imageId, orderId, customerId) => {
    try {
        const imagePath = await downloadImage(imageId);
        if (!imagePath) {
            return "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà";
        }

        const formData = new FormData();
        formData.append("files", fs.createReadStream(imagePath));
        formData.append("log", "true");

        const response = await axios.post(
            `https://api.slipok.com/api/line/apikey/${config.SLIPOK_BRANCH_ID}`,
            formData,
            {
                headers: {
                    "x-authorization": config.SLIPOK_API_KEY,
                    ...formData.getHeaders(),
                }
            }
        );

        // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à
        fs.unlinkSync(imagePath);

        console.log("‚úÖ SlipOK Response:", response.data);

        if (response.data.success) {
            await db.query("UPDATE Payment SET status = 'Confirmed' WHERE Order_id = ?", [orderId]);

            // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô Completed
            await db.query("UPDATE `Order` SET status = 'Completed' WHERE Order_id = ?", [orderId]);

            return "‚úÖ ‡∏™‡∏•‡∏¥‡∏õ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô";
        } else {
            return "‚ùå ‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà";
        }
    } catch (error) {
        console.error("‚ùå Error verifying slip:", error.response ? error.response.data : error.message);
        return `‚ùå ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ`;
    }
};

const CashPayment = async (orderId, customerId) => {
    try {
        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Payment ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Order ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        const [existingPayment] = await db.query(
            "SELECT * FROM Payment WHERE Order_id = ?",
            [orderId]
        );

        if (existingPayment.length > 0) {
            return "‚õî ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß";
        }

        // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î
        await db.query(
            "INSERT INTO Payment (Order_id, Amount, Payment_method, Payment_date, status) VALUES (?, ?, ?, NOW(), 'Pending')",
            [orderId, 0, "Cash"] // üíµ ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        );

        return "‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö";
    } catch (error) {
        console.error("‚ùå Error processing cash payment:", error);
        return "‚ùå ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î";
    }
};


module.exports = {
    verifySlip,
    CashPayment
};
