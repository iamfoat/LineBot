const axios = require("axios");
const db = require("../db");
const FormData = require("form-data");
const fs = require("fs");
const path = require("path");
require("dotenv").config();
const cloudinary = require("cloudinary").v2;

const config = {
  channelAccessToken: process.env.CHANNEL_ACCESS_TOKEN,
  SLIPOK_BRANCH_ID: process.env.SLIPOK_BRANCH_ID,
  SLIPOK_API_KEY: process.env.SLIPOK_API_KEY,
};

cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
});

// üì• ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å LINE API
const downloadImage = async (imageId) => {
  const url = `https://api-data.line.me/v2/bot/message/${imageId}/content`;
  const headers = { Authorization: `Bearer ${config.channelAccessToken}` };

  try {
    console.log("üì• Downloading image from:", url);
    // console.log("üì• Sending request with headers:", headers);
    const response = await axios.get(url, {
      headers,
      responseType: "arraybuffer",
    });

    const tmpDir = path.join(__dirname, "tmp");
    if (!fs.existsSync(tmpDir)) {
      fs.mkdirSync(tmpDir, { recursive: true });
    }

    const imagePath = path.join(tmpDir, `slip-${imageId}.jpg`);
    fs.writeFileSync(imagePath, response.data);

    return imagePath;
  } catch (error) {
    console.error(
      "‚ùå Error downloading image:",
      error.response ? error.response.data.toString() : error.message
    );
    return null;
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ
const verifySlip = async (imageId, orderId, customerId) => {
  try {
    const imagePath = await downloadImage(imageId);
    if (!imagePath) {
      return "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà";
    }

    const result = await cloudinary.uploader.upload(imagePath, {
      folder: "slips",
    });
    const imageUrl = result.secure_url;
    console.log("‚úÖ URL ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Cloudinary:", imageUrl);

    // ‚úÖ 1. ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏≤‡∏Å DB
    const [orderRows] = await db.query(
      "SELECT Total_amount FROM `Order` WHERE Order_id = ?",
      [orderId]
    );
    const amount = orderRows.length ? orderRows[0].Total_amount : 0;

    const FormData = require("form-data");
    const formData = new FormData();
    formData.append("files", fs.createReadStream(imagePath));
    formData.append("log", "true");
    formData.append("amount", amount);

    const SLIPOK_BRANCH_ID = "40471";
    const SLIPOK_API_KEY = "SLIPOKMNB83WS";

    const response = await axios.post(
      `https://api.slipok.com/api/line/apikey/${SLIPOK_BRANCH_ID}`,
      formData,
      {
        headers: {
          "x-authorization": SLIPOK_API_KEY,
          ...formData.getHeaders(),
        },
      }
    );

    const { data } = response.data;

    fs.unlinkSync(imagePath);
    console.log("‚úÖ SlipOK Response:", response.data);

    if (data?.success) {
      await db.query(
        "UPDATE Payment SET status = 'Confirmed' WHERE Order_id = ?",
        [orderId]
      );

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô Completed
      await db.query(
        "UPDATE `Order` SET status = 'Completed' WHERE Order_id = ?",
        [orderId]
      );

      return "‚úÖ ‡∏™‡∏•‡∏¥‡∏õ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô";
    } else {
      return "‚ùå ‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà";
    }
  } catch (error) {
    const errData = error?.response?.data;
    console.error("raw error object:", error);
    console.error("error.response:", error.response);
    console.error("error.response.data:", errData);

    if (errData?.code) {
      switch (errData.code) {
        case 1010:
          return "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà ‡∏™‡∏•‡∏¥‡∏õ‡∏à‡∏≤‡∏Å‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 5 ‡∏ô‡∏≤‡∏ó‡∏µ";
        case 1012:
          // ‚úÖ ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ! ‡∏î‡∏∂‡∏á timestamp ‡∏à‡∏≤‡∏Å message
          const timestamp = errData.message?.split("‡πÄ‡∏°‡∏∑‡πà‡∏≠")[1]?.trim();
          return `‚ùó ‡∏™‡∏•‡∏¥‡∏õ‡∏ã‡πâ‡∏≥: ‡πÄ‡∏Ñ‡∏¢‡∏™‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ ${timestamp || "‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ"}`;
        case 1013:
          return "‚ùå ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏™‡∏•‡∏¥‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á";
        case 1014:
          return "‚ùå ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤";
        default:
          return `‚ùå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô (code: ${errData.code})`;
      }
    }

    return "‚ùå ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ";
  }
};

const CashPayment = async (orderId, customerId) => {
  try {
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Payment ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Order ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const [existingPayment] = await db.query(
      "SELECT * FROM Payment WHERE Order_id = ? AND status = 'Confirmed'",
      [orderId]
    );

    if (existingPayment.length > 0) {
      return "‚õî ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß";
    }

    const [orderRow] = await db.query(
        "SELECT Total_amount FROM `Order` WHERE Order_id = ?",
        [orderId]
      );
      
      const amount = orderRow.length > 0 ? orderRow[0].Total_amount : 0;
      

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î
    await db.query(
      "INSERT INTO Payment (Order_id, Amount, Payment_method, Payment_date, status) VALUES (?, ?, ?, NOW(), 'Confirmed')",
      [orderId, amount, "Cash"] // üíµ ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    );

    await db.query(
      "UPDATE `Order` SET status = 'Completed' WHERE Order_id = ?",
      [orderId]
    );

    return "‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö";
  } catch (error) {
    console.error("‚ùå Error processing cash payment:", error);
    return "‚ùå ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î";
  }
};

module.exports = {
  verifySlip,
  CashPayment,
};
